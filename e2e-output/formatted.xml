<?xml version="1.0" encoding="utf-8"?>
<testsuites>
  <testsuite name="pytest" errors="56" failures="5" skipped="4" tests="66" time="161.037" timestamp="2025-04-04T02:46:48.346514+00:00" hostname="e2ba1aeff0a3">
    <testcase classname="tests.test_01_topology.TestE2ETopology" name="test_010_list_topology" time="2.119">
      <failure message="AssertionError: Expected 204 but got 200 - {&quot;id&quot;: &quot;urn:sdx:topology:&quot;, &quot;name&quot;: &quot;SAX-OXP&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: &quot;l2vpn-ptp&quot;, &quot;l2vpn_ptmp&quot;: [null], &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;version&quot;: &quot;39&quot;, &quot;model_version&quot;: &quot;2.0.0&quot;, &quot;timestamp&quot;: &quot;2025-04-04T02:33:49.095681&quot;, &quot;nodes&quot;: [{&quot;id&quot;: &quot;urn:sdx:node:tenet.ac.za:Tenet01&quot;, &quot;name&quot;: &quot;Tenet01&quot;, &quot;short_name&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;location&quot;: {&quot;address&quot;: &quot;CapeTown&quot;, &quot;latitude&quot;: -33.0, &quot;longitude&quot;: 18.0, &quot;iso3166_2_lvl4&quot;: &quot;ZA-WC&quot;}, &quot;ports&quot;: [{&quot;id&quot;: &quot;urn:sdx:port:tenet.ac.za:Tenet01:41&quot;, &quot;name&quot;: &quot;Tenet01-eth41&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:tenet.ac.za:Tenet01&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:port:sax.net:Sax01:41&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:tenet.ac.za:Tenet01:1&quot;, &quot;name&quot;: &quot;Tenet01-eth1&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:tenet.ac.za:Tenet01&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:link:tenet.ac.za:Tenet01/1_Tenet02/1&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:tenet.ac.za:Tenet01:2&quot;, &quot;name&quot;: &quot;Tenet01-eth2&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:tenet.ac.za:Tenet01&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:link:tenet.ac.za:Tenet01/2_Tenet03/2&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:tenet.ac.za:Tenet01:50&quot;, &quot;name&quot;: &quot;Tenet01-eth50&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:tenet.ac.za:Tenet01&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}], &quot;private_attributes&quot;: []}, {&quot;id&quot;: &quot;urn:sdx:node:tenet.ac.za:Tenet02&quot;, &quot;name&quot;: &quot;Tenet02&quot;, &quot;short_name&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;location&quot;: {&quot;address&quot;: &quot;Johanesburgo&quot;, &quot;latitude&quot;: -26.0, &quot;longitude&quot;: 28.0, &quot;iso3166_2_lvl4&quot;: &quot;ZA-GP&quot;}, &quot;ports&quot;: [{&quot;id&quot;: &quot;urn:sdx:port:tenet.ac.za:Tenet02:41&quot;, &quot;name&quot;: &quot;Tenet02-eth41&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:tenet.ac.za:Tenet02&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:port:sax.net:Sax02:41&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:tenet.ac.za:Tenet02:1&quot;, &quot;name&quot;: &quot;Tenet02-eth1&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:tenet.ac.za:Tenet02&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:link:tenet.ac.za:Tenet01/1_Tenet02/1&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:tenet.ac.za:Tenet02:50&quot;, &quot;name&quot;: &quot;Tenet02-eth50&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:tenet.ac.za:Tenet02&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:tenet.ac.za:Tenet02:2&quot;, &quot;name&quot;: &quot;Tenet02-eth3&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:tenet.ac.za:Tenet02&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:link:tenet.ac.za:Tenet02/2_Tenet03/1&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}], &quot;private_attributes&quot;: []}, {&quot;id&quot;: &quot;urn:sdx:node:tenet.ac.za:Tenet03&quot;, &quot;name&quot;: &quot;Tenet03&quot;, &quot;short_name&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;location&quot;: {&quot;address&quot;: &quot;EastLondon&quot;, &quot;latitude&quot;: -33.0, &quot;longitude&quot;: 27.0, &quot;iso3166_2_lvl4&quot;: &quot;ZA-EC&quot;}, &quot;ports&quot;: [{&quot;id&quot;: &quot;urn:sdx:port:tenet.ac.za:Tenet03:2&quot;, &quot;name&quot;: &quot;Tenet03-eth2&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:tenet.ac.za:Tenet03&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:link:tenet.ac.za:Tenet01/2_Tenet03/2&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:tenet.ac.za:Tenet03:50&quot;, &quot;name&quot;: &quot;Tenet03-eth50&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:tenet.ac.za:Tenet03&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:tenet.ac.za:Tenet03:1&quot;, &quot;name&quot;: &quot;Tenet03-eth3&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:tenet.ac.za:Tenet03&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:link:tenet.ac.za:Tenet02/2_Tenet03/1&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}], &quot;private_attributes&quot;: []}, {&quot;id&quot;: &quot;urn:sdx:node:sax.net:Sax01&quot;, &quot;name&quot;: &quot;Sax01&quot;, &quot;short_name&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;location&quot;: {&quot;address&quot;: &quot;Fortaleza&quot;, &quot;latitude&quot;: -3.0, &quot;longitude&quot;: -40.0, &quot;iso3166_2_lvl4&quot;: &quot;BR-CE&quot;}, &quot;ports&quot;: [{&quot;id&quot;: &quot;urn:sdx:port:sax.net:Sax01:41&quot;, &quot;name&quot;: &quot;Sax01-eth41&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:sax.net:Sax01&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:port:tenet.ac.za:Tenet01:41&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:sax.net:Sax01:1&quot;, &quot;name&quot;: &quot;Sax01-eth1&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:sax.net:Sax01&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:link:sax.net:Sax01/1_Sax02/1&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:sax.net:Sax01:40&quot;, &quot;name&quot;: &quot;Sax01-eth40&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:sax.net:Sax01&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:port:ampath.net:Ampath1:40&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:sax.net:Sax01:50&quot;, &quot;name&quot;: &quot;Sax01-eth50&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:sax.net:Sax01&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}], &quot;private_attributes&quot;: []}, {&quot;id&quot;: &quot;urn:sdx:node:sax.net:Sax02&quot;, &quot;name&quot;: &quot;Sax02&quot;, &quot;short_name&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;location&quot;: {&quot;address&quot;: &quot;Fortaleza&quot;, &quot;latitude&quot;: -3.0, &quot;longitude&quot;: -20.0, &quot;iso3166_2_lvl4&quot;: &quot;BR-CE&quot;}, &quot;ports&quot;: [{&quot;id&quot;: &quot;urn:sdx:port:sax.net:Sax02:41&quot;, &quot;name&quot;: &quot;Sax02-eth41&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:sax.net:Sax02&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:port:tenet.ac.za:Tenet02:41&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:sax.net:Sax02:1&quot;, &quot;name&quot;: &quot;Sax02-eth1&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:sax.net:Sax02&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:link:sax.net:Sax01/1_Sax02/1&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:sax.net:Sax02:40&quot;, &quot;name&quot;: &quot;Sax02-eth40&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:sax.net:Sax02&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:port:ampath.net:Ampath2:40&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:sax.net:Sax02:50&quot;, &quot;name&quot;: &quot;Sax02-eth50&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:sax.net:Sax02&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}], &quot;private_attributes&quot;: []}, {&quot;id&quot;: &quot;urn:sdx:node:ampath.net:Ampath1&quot;, &quot;name&quot;: &quot;Ampath1&quot;, &quot;short_name&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;location&quot;: {&quot;address&quot;: &quot;Miami&quot;, &quot;latitude&quot;: 25.77, &quot;longitude&quot;: -80.19, &quot;iso3166_2_lvl4&quot;: &quot;US-FL&quot;}, &quot;ports&quot;: [{&quot;id&quot;: &quot;urn:sdx:port:ampath.net:Ampath1:1&quot;, &quot;name&quot;: &quot;Ampath1-eth1&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:ampath.net:Ampath1&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:link:ampath.net:Ampath1/1_Ampath2/1&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:ampath.net:Ampath1:40&quot;, &quot;name&quot;: &quot;Ampath1-eth40&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:ampath.net:Ampath1&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:port:sax.net:Sax01:40&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:ampath.net:Ampath1:2&quot;, &quot;name&quot;: &quot;Ampath1-eth2&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:ampath.net:Ampath1&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:link:ampath.net:Ampath1/2_Ampath3/2&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:ampath.net:Ampath1:50&quot;, &quot;name&quot;: &quot;Ampath1-eth50&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:ampath.net:Ampath1&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}], &quot;private_attributes&quot;: []}, {&quot;id&quot;: &quot;urn:sdx:node:ampath.net:Ampath2&quot;, &quot;name&quot;: &quot;Ampath2&quot;, &quot;short_name&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;location&quot;: {&quot;address&quot;: &quot;BocaRaton&quot;, &quot;latitude&quot;: 26.38, &quot;longitude&quot;: -80.11, &quot;iso3166_2_lvl4&quot;: &quot;US-FL&quot;}, &quot;ports&quot;: [{&quot;id&quot;: &quot;urn:sdx:port:ampath.net:Ampath2:1&quot;, &quot;name&quot;: &quot;Ampath2-eth1&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:ampath.net:Ampath2&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:link:ampath.net:Ampath1/1_Ampath2/1&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:ampath.net:Ampath2:50&quot;, &quot;name&quot;: &quot;Ampath2-eth50&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:ampath.net:Ampath2&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:ampath.net:Ampath2:40&quot;, &quot;name&quot;: &quot;Ampath2-eth40&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:ampath.net:Ampath2&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:port:sax.net:Sax02:40&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:ampath.net:Ampath2:3&quot;, &quot;name&quot;: &quot;Ampath2-eth3&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:ampath.net:Ampath2&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:link:ampath.net:Ampath2/3_Ampath3/3&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}], &quot;private_attributes&quot;: []}, {&quot;id&quot;: &quot;urn:sdx:node:ampath.net:Ampath3&quot;, &quot;name&quot;: &quot;Ampath3&quot;, &quot;short_name&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;location&quot;: {&quot;address&quot;: &quot;Jacksonville&quot;, &quot;latitude&quot;: 30.27, &quot;longitude&quot;: -81.68, &quot;iso3166_2_lvl4&quot;: &quot;US-FL&quot;}, &quot;ports&quot;: [{&quot;id&quot;: &quot;urn:sdx:port:ampath.net:Ampath3:50&quot;, &quot;name&quot;: &quot;Ampath3-eth50&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:ampath.net:Ampath3&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:ampath.net:Ampath3:2&quot;, &quot;name&quot;: &quot;Ampath3-eth2&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:ampath.net:Ampath3&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:link:ampath.net:Ampath1/2_Ampath3/2&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:port:ampath.net:Ampath3:3&quot;, &quot;name&quot;: &quot;Ampath3-eth3&quot;, &quot;entities&quot;: [], &quot;short_name&quot;: null, &quot;node&quot;: &quot;urn:sdx:node:ampath.net:Ampath3&quot;, &quot;vlan_range&quot;: null, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;nni&quot;: &quot;urn:sdx:link:ampath.net:Ampath2/3_Ampath3/3&quot;, &quot;type&quot;: &quot;10GE&quot;, &quot;services&quot;: {&quot;l2vpn_ptp&quot;: {&quot;vlan_range&quot;: [&quot;1-4095&quot;]}, &quot;l2vpn_ptmp&quot;: {}, &quot;monitoring_capability&quot;: null, &quot;owner&quot;: null, &quot;private_attributes&quot;: null, &quot;provisioning_system&quot;: null, &quot;provisioning_url&quot;: null, &quot;vendor&quot;: null}, &quot;private_attributes&quot;: null}], &quot;private_attributes&quot;: []}], &quot;links&quot;: [{&quot;id&quot;: &quot;urn:sdx:link:interdomain:sax.net:Sax01:41:tenet.ac.za:Tenet01:41&quot;, &quot;name&quot;: &quot;Sax01-eth41--Tenet01-eth41&quot;, &quot;short_name&quot;: null, &quot;ports&quot;: [&quot;urn:sdx:port:sax.net:Sax01:41&quot;, &quot;urn:sdx:port:tenet.ac.za:Tenet01:41&quot;], &quot;bandwidth&quot;: 10, &quot;residual_bandwidth&quot;: 100.0, &quot;latency&quot;: 0, &quot;packet_loss&quot;: 0, &quot;availability&quot;: 100, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;private_attributes&quot;: null, &quot;timestamp&quot;: null, &quot;measurement_period&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:link:interdomain:sax.net:Sax02:41:tenet.ac.za:Tenet02:41&quot;, &quot;name&quot;: &quot;Sax02-eth41--Tenet02-eth41&quot;, &quot;short_name&quot;: null, &quot;ports&quot;: [&quot;urn:sdx:port:sax.net:Sax02:41&quot;, &quot;urn:sdx:port:tenet.ac.za:Tenet02:41&quot;], &quot;bandwidth&quot;: 10, &quot;residual_bandwidth&quot;: 100.0, &quot;latency&quot;: 0, &quot;packet_loss&quot;: 0, &quot;availability&quot;: 100, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;private_attributes&quot;: null, &quot;timestamp&quot;: null, &quot;measurement_period&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:link:interdomain:ampath.net:Ampath1:40:sax.net:Sax01:40&quot;, &quot;name&quot;: &quot;Ampath1-eth40--Sax01-eth40&quot;, &quot;short_name&quot;: null, &quot;ports&quot;: [&quot;urn:sdx:port:ampath.net:Ampath1:40&quot;, &quot;urn:sdx:port:sax.net:Sax01:40&quot;], &quot;bandwidth&quot;: 10, &quot;residual_bandwidth&quot;: 100.0, &quot;latency&quot;: 0, &quot;packet_loss&quot;: 0, &quot;availability&quot;: 100, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;private_attributes&quot;: null, &quot;timestamp&quot;: null, &quot;measurement_period&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:link:interdomain:ampath.net:Ampath2:40:sax.net:Sax02:40&quot;, &quot;name&quot;: &quot;Ampath2-eth40--Sax02-eth40&quot;, &quot;short_name&quot;: null, &quot;ports&quot;: [&quot;urn:sdx:port:ampath.net:Ampath2:40&quot;, &quot;urn:sdx:port:sax.net:Sax02:40&quot;], &quot;bandwidth&quot;: 10, &quot;residual_bandwidth&quot;: 100.0, &quot;latency&quot;: 0, &quot;packet_loss&quot;: 0, &quot;availability&quot;: 100, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;private_attributes&quot;: null, &quot;timestamp&quot;: null, &quot;measurement_period&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:link:tenet.ac.za:Tenet01/1_Tenet02/1&quot;, &quot;name&quot;: &quot;Tenet01/1_Tenet02/1&quot;, &quot;short_name&quot;: null, &quot;ports&quot;: [&quot;urn:sdx:port:tenet.ac.za:Tenet01:1&quot;, &quot;urn:sdx:port:tenet.ac.za:Tenet02:1&quot;], &quot;bandwidth&quot;: 10, &quot;residual_bandwidth&quot;: 100, &quot;latency&quot;: 0, &quot;packet_loss&quot;: 0, &quot;availability&quot;: 100, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;private_attributes&quot;: null, &quot;timestamp&quot;: null, &quot;measurement_period&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:link:tenet.ac.za:Tenet01/2_Tenet03/2&quot;, &quot;name&quot;: &quot;Tenet01/2_Tenet03/2&quot;, &quot;short_name&quot;: null, &quot;ports&quot;: [&quot;urn:sdx:port:tenet.ac.za:Tenet01:2&quot;, &quot;urn:sdx:port:tenet.ac.za:Tenet03:2&quot;], &quot;bandwidth&quot;: 10, &quot;residual_bandwidth&quot;: 100, &quot;latency&quot;: 0, &quot;packet_loss&quot;: 0, &quot;availability&quot;: 100, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;private_attributes&quot;: null, &quot;timestamp&quot;: null, &quot;measurement_period&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:link:tenet.ac.za:Tenet02/2_Tenet03/1&quot;, &quot;name&quot;: &quot;Tenet02/2_Tenet03/1&quot;, &quot;short_name&quot;: null, &quot;ports&quot;: [&quot;urn:sdx:port:tenet.ac.za:Tenet02:2&quot;, &quot;urn:sdx:port:tenet.ac.za:Tenet03:1&quot;], &quot;bandwidth&quot;: 10, &quot;residual_bandwidth&quot;: 100, &quot;latency&quot;: 0, &quot;packet_loss&quot;: 0, &quot;availability&quot;: 100, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;private_attributes&quot;: null, &quot;timestamp&quot;: null, &quot;measurement_period&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:link:sax.net:Sax01/1_Sax02/1&quot;, &quot;name&quot;: &quot;Sax01/1_Sax02/1&quot;, &quot;short_name&quot;: null, &quot;ports&quot;: [&quot;urn:sdx:port:sax.net:Sax01:1&quot;, &quot;urn:sdx:port:sax.net:Sax02:1&quot;], &quot;bandwidth&quot;: 10, &quot;residual_bandwidth&quot;: 100, &quot;latency&quot;: 0, &quot;packet_loss&quot;: 0, &quot;availability&quot;: 100, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;private_attributes&quot;: null, &quot;timestamp&quot;: null, &quot;measurement_period&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:link:ampath.net:Ampath1/1_Ampath2/1&quot;, &quot;name&quot;: &quot;Ampath1/1_Ampath2/1&quot;, &quot;short_name&quot;: null, &quot;ports&quot;: [&quot;urn:sdx:port:ampath.net:Ampath1:1&quot;, &quot;urn:sdx:port:ampath.net:Ampath2:1&quot;], &quot;bandwidth&quot;: 10, &quot;residual_bandwidth&quot;: 100, &quot;latency&quot;: 0, &quot;packet_loss&quot;: 0, &quot;availability&quot;: 100, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;private_attributes&quot;: null, &quot;timestamp&quot;: null, &quot;measurement_period&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:link:ampath.net:Ampath2/3_Ampath3/3&quot;, &quot;name&quot;: &quot;Ampath2/3_Ampath3/3&quot;, &quot;short_name&quot;: null, &quot;ports&quot;: [&quot;urn:sdx:port:ampath.net:Ampath2:3&quot;, &quot;urn:sdx:port:ampath.net:Ampath3:3&quot;], &quot;bandwidth&quot;: 10, &quot;residual_bandwidth&quot;: 100, &quot;latency&quot;: 0, &quot;packet_loss&quot;: 0, &quot;availability&quot;: 100, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;private_attributes&quot;: null, &quot;timestamp&quot;: null, &quot;measurement_period&quot;: null}, {&quot;id&quot;: &quot;urn:sdx:link:ampath.net:Ampath1/2_Ampath3/2&quot;, &quot;name&quot;: &quot;Ampath1/2_Ampath3/2&quot;, &quot;short_name&quot;: null, &quot;ports&quot;: [&quot;urn:sdx:port:ampath.net:Ampath1:2&quot;, &quot;urn:sdx:port:ampath.net:Ampath3:2&quot;], &quot;bandwidth&quot;: 10, &quot;residual_bandwidth&quot;: 100, &quot;latency&quot;: 0, &quot;packet_loss&quot;: 0, &quot;availability&quot;: 100, &quot;status&quot;: &quot;down&quot;, &quot;state&quot;: &quot;enabled&quot;, &quot;private_attributes&quot;: null, &quot;timestamp&quot;: null, &quot;measurement_period&quot;: null}], &quot;private_attributes&quot;: null}&#10;assert 200 == 204&#10; +  where 200 = &lt;Response [200]&gt;.status_code">self = &lt;test_01_topology.TestE2ETopology object at 0x7f2d1a781090&gt;

    def test_010_list_topology(self):
        """Test if the topology was loaded correctly."""
        api_url = SDX_CONTROLLER + '/topology'
    
        # initially the topology is empty, since no OXP was enabled
        response = requests.get(api_url)
&gt;       assert response.status_code == 204, f"Expected 204 but got {response.status_code} - {response.text}"
E       AssertionError: Expected 204 but got 200 - {"id": "urn:sdx:topology:", "name": "SAX-OXP", "services": {"l2vpn_ptp": "l2vpn-ptp", "l2vpn_ptmp": [null], "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "version": "39", "model_version": "2.0.0", "timestamp": "2025-04-04T02:33:49.095681", "nodes": [{"id": "urn:sdx:node:tenet.ac.za:Tenet01", "name": "Tenet01", "short_name": null, "status": "down", "state": "enabled", "location": {"address": "CapeTown", "latitude": -33.0, "longitude": 18.0, "iso3166_2_lvl4": "ZA-WC"}, "ports": [{"id": "urn:sdx:port:tenet.ac.za:Tenet01:41", "name": "Tenet01-eth41", "entities": [], "short_name": null, "node": "urn:sdx:node:tenet.ac.za:Tenet01", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:port:sax.net:Sax01:41", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:tenet.ac.za:Tenet01:1", "name": "Tenet01-eth1", "entities": [], "short_name": null, "node": "urn:sdx:node:tenet.ac.za:Tenet01", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:link:tenet.ac.za:Tenet01/1_Tenet02/1", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:tenet.ac.za:Tenet01:2", "name": "Tenet01-eth2", "entities": [], "short_name": null, "node": "urn:sdx:node:tenet.ac.za:Tenet01", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:link:tenet.ac.za:Tenet01/2_Tenet03/2", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:tenet.ac.za:Tenet01:50", "name": "Tenet01-eth50", "entities": [], "short_name": null, "node": "urn:sdx:node:tenet.ac.za:Tenet01", "vlan_range": null, "status": "down", "state": "enabled", "nni": "", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}], "private_attributes": []}, {"id": "urn:sdx:node:tenet.ac.za:Tenet02", "name": "Tenet02", "short_name": null, "status": "down", "state": "enabled", "location": {"address": "Johanesburgo", "latitude": -26.0, "longitude": 28.0, "iso3166_2_lvl4": "ZA-GP"}, "ports": [{"id": "urn:sdx:port:tenet.ac.za:Tenet02:41", "name": "Tenet02-eth41", "entities": [], "short_name": null, "node": "urn:sdx:node:tenet.ac.za:Tenet02", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:port:sax.net:Sax02:41", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:tenet.ac.za:Tenet02:1", "name": "Tenet02-eth1", "entities": [], "short_name": null, "node": "urn:sdx:node:tenet.ac.za:Tenet02", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:link:tenet.ac.za:Tenet01/1_Tenet02/1", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:tenet.ac.za:Tenet02:50", "name": "Tenet02-eth50", "entities": [], "short_name": null, "node": "urn:sdx:node:tenet.ac.za:Tenet02", "vlan_range": null, "status": "down", "state": "enabled", "nni": "", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:tenet.ac.za:Tenet02:2", "name": "Tenet02-eth3", "entities": [], "short_name": null, "node": "urn:sdx:node:tenet.ac.za:Tenet02", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:link:tenet.ac.za:Tenet02/2_Tenet03/1", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}], "private_attributes": []}, {"id": "urn:sdx:node:tenet.ac.za:Tenet03", "name": "Tenet03", "short_name": null, "status": "down", "state": "enabled", "location": {"address": "EastLondon", "latitude": -33.0, "longitude": 27.0, "iso3166_2_lvl4": "ZA-EC"}, "ports": [{"id": "urn:sdx:port:tenet.ac.za:Tenet03:2", "name": "Tenet03-eth2", "entities": [], "short_name": null, "node": "urn:sdx:node:tenet.ac.za:Tenet03", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:link:tenet.ac.za:Tenet01/2_Tenet03/2", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:tenet.ac.za:Tenet03:50", "name": "Tenet03-eth50", "entities": [], "short_name": null, "node": "urn:sdx:node:tenet.ac.za:Tenet03", "vlan_range": null, "status": "down", "state": "enabled", "nni": "", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:tenet.ac.za:Tenet03:1", "name": "Tenet03-eth3", "entities": [], "short_name": null, "node": "urn:sdx:node:tenet.ac.za:Tenet03", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:link:tenet.ac.za:Tenet02/2_Tenet03/1", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}], "private_attributes": []}, {"id": "urn:sdx:node:sax.net:Sax01", "name": "Sax01", "short_name": null, "status": "down", "state": "enabled", "location": {"address": "Fortaleza", "latitude": -3.0, "longitude": -40.0, "iso3166_2_lvl4": "BR-CE"}, "ports": [{"id": "urn:sdx:port:sax.net:Sax01:41", "name": "Sax01-eth41", "entities": [], "short_name": null, "node": "urn:sdx:node:sax.net:Sax01", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:port:tenet.ac.za:Tenet01:41", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:sax.net:Sax01:1", "name": "Sax01-eth1", "entities": [], "short_name": null, "node": "urn:sdx:node:sax.net:Sax01", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:link:sax.net:Sax01/1_Sax02/1", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:sax.net:Sax01:40", "name": "Sax01-eth40", "entities": [], "short_name": null, "node": "urn:sdx:node:sax.net:Sax01", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:port:ampath.net:Ampath1:40", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:sax.net:Sax01:50", "name": "Sax01-eth50", "entities": [], "short_name": null, "node": "urn:sdx:node:sax.net:Sax01", "vlan_range": null, "status": "down", "state": "enabled", "nni": "", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}], "private_attributes": []}, {"id": "urn:sdx:node:sax.net:Sax02", "name": "Sax02", "short_name": null, "status": "down", "state": "enabled", "location": {"address": "Fortaleza", "latitude": -3.0, "longitude": -20.0, "iso3166_2_lvl4": "BR-CE"}, "ports": [{"id": "urn:sdx:port:sax.net:Sax02:41", "name": "Sax02-eth41", "entities": [], "short_name": null, "node": "urn:sdx:node:sax.net:Sax02", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:port:tenet.ac.za:Tenet02:41", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:sax.net:Sax02:1", "name": "Sax02-eth1", "entities": [], "short_name": null, "node": "urn:sdx:node:sax.net:Sax02", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:link:sax.net:Sax01/1_Sax02/1", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:sax.net:Sax02:40", "name": "Sax02-eth40", "entities": [], "short_name": null, "node": "urn:sdx:node:sax.net:Sax02", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:port:ampath.net:Ampath2:40", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:sax.net:Sax02:50", "name": "Sax02-eth50", "entities": [], "short_name": null, "node": "urn:sdx:node:sax.net:Sax02", "vlan_range": null, "status": "down", "state": "enabled", "nni": "", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}], "private_attributes": []}, {"id": "urn:sdx:node:ampath.net:Ampath1", "name": "Ampath1", "short_name": null, "status": "down", "state": "enabled", "location": {"address": "Miami", "latitude": 25.77, "longitude": -80.19, "iso3166_2_lvl4": "US-FL"}, "ports": [{"id": "urn:sdx:port:ampath.net:Ampath1:1", "name": "Ampath1-eth1", "entities": [], "short_name": null, "node": "urn:sdx:node:ampath.net:Ampath1", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:link:ampath.net:Ampath1/1_Ampath2/1", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:ampath.net:Ampath1:40", "name": "Ampath1-eth40", "entities": [], "short_name": null, "node": "urn:sdx:node:ampath.net:Ampath1", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:port:sax.net:Sax01:40", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:ampath.net:Ampath1:2", "name": "Ampath1-eth2", "entities": [], "short_name": null, "node": "urn:sdx:node:ampath.net:Ampath1", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:link:ampath.net:Ampath1/2_Ampath3/2", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:ampath.net:Ampath1:50", "name": "Ampath1-eth50", "entities": [], "short_name": null, "node": "urn:sdx:node:ampath.net:Ampath1", "vlan_range": null, "status": "down", "state": "enabled", "nni": "", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}], "private_attributes": []}, {"id": "urn:sdx:node:ampath.net:Ampath2", "name": "Ampath2", "short_name": null, "status": "down", "state": "enabled", "location": {"address": "BocaRaton", "latitude": 26.38, "longitude": -80.11, "iso3166_2_lvl4": "US-FL"}, "ports": [{"id": "urn:sdx:port:ampath.net:Ampath2:1", "name": "Ampath2-eth1", "entities": [], "short_name": null, "node": "urn:sdx:node:ampath.net:Ampath2", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:link:ampath.net:Ampath1/1_Ampath2/1", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:ampath.net:Ampath2:50", "name": "Ampath2-eth50", "entities": [], "short_name": null, "node": "urn:sdx:node:ampath.net:Ampath2", "vlan_range": null, "status": "down", "state": "enabled", "nni": "", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:ampath.net:Ampath2:40", "name": "Ampath2-eth40", "entities": [], "short_name": null, "node": "urn:sdx:node:ampath.net:Ampath2", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:port:sax.net:Sax02:40", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:ampath.net:Ampath2:3", "name": "Ampath2-eth3", "entities": [], "short_name": null, "node": "urn:sdx:node:ampath.net:Ampath2", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:link:ampath.net:Ampath2/3_Ampath3/3", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}], "private_attributes": []}, {"id": "urn:sdx:node:ampath.net:Ampath3", "name": "Ampath3", "short_name": null, "status": "down", "state": "enabled", "location": {"address": "Jacksonville", "latitude": 30.27, "longitude": -81.68, "iso3166_2_lvl4": "US-FL"}, "ports": [{"id": "urn:sdx:port:ampath.net:Ampath3:50", "name": "Ampath3-eth50", "entities": [], "short_name": null, "node": "urn:sdx:node:ampath.net:Ampath3", "vlan_range": null, "status": "down", "state": "enabled", "nni": "", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:ampath.net:Ampath3:2", "name": "Ampath3-eth2", "entities": [], "short_name": null, "node": "urn:sdx:node:ampath.net:Ampath3", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:link:ampath.net:Ampath1/2_Ampath3/2", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}, {"id": "urn:sdx:port:ampath.net:Ampath3:3", "name": "Ampath3-eth3", "entities": [], "short_name": null, "node": "urn:sdx:node:ampath.net:Ampath3", "vlan_range": null, "status": "down", "state": "enabled", "nni": "urn:sdx:link:ampath.net:Ampath2/3_Ampath3/3", "type": "10GE", "services": {"l2vpn_ptp": {"vlan_range": ["1-4095"]}, "l2vpn_ptmp": {}, "monitoring_capability": null, "owner": null, "private_attributes": null, "provisioning_system": null, "provisioning_url": null, "vendor": null}, "private_attributes": null}], "private_attributes": []}], "links": [{"id": "urn:sdx:link:interdomain:sax.net:Sax01:41:tenet.ac.za:Tenet01:41", "name": "Sax01-eth41--Tenet01-eth41", "short_name": null, "ports": ["urn:sdx:port:sax.net:Sax01:41", "urn:sdx:port:tenet.ac.za:Tenet01:41"], "bandwidth": 10, "residual_bandwidth": 100.0, "latency": 0, "packet_loss": 0, "availability": 100, "status": "down", "state": "enabled", "private_attributes": null, "timestamp": null, "measurement_period": null}, {"id": "urn:sdx:link:interdomain:sax.net:Sax02:41:tenet.ac.za:Tenet02:41", "name": "Sax02-eth41--Tenet02-eth41", "short_name": null, "ports": ["urn:sdx:port:sax.net:Sax02:41", "urn:sdx:port:tenet.ac.za:Tenet02:41"], "bandwidth": 10, "residual_bandwidth": 100.0, "latency": 0, "packet_loss": 0, "availability": 100, "status": "down", "state": "enabled", "private_attributes": null, "timestamp": null, "measurement_period": null}, {"id": "urn:sdx:link:interdomain:ampath.net:Ampath1:40:sax.net:Sax01:40", "name": "Ampath1-eth40--Sax01-eth40", "short_name": null, "ports": ["urn:sdx:port:ampath.net:Ampath1:40", "urn:sdx:port:sax.net:Sax01:40"], "bandwidth": 10, "residual_bandwidth": 100.0, "latency": 0, "packet_loss": 0, "availability": 100, "status": "down", "state": "enabled", "private_attributes": null, "timestamp": null, "measurement_period": null}, {"id": "urn:sdx:link:interdomain:ampath.net:Ampath2:40:sax.net:Sax02:40", "name": "Ampath2-eth40--Sax02-eth40", "short_name": null, "ports": ["urn:sdx:port:ampath.net:Ampath2:40", "urn:sdx:port:sax.net:Sax02:40"], "bandwidth": 10, "residual_bandwidth": 100.0, "latency": 0, "packet_loss": 0, "availability": 100, "status": "down", "state": "enabled", "private_attributes": null, "timestamp": null, "measurement_period": null}, {"id": "urn:sdx:link:tenet.ac.za:Tenet01/1_Tenet02/1", "name": "Tenet01/1_Tenet02/1", "short_name": null, "ports": ["urn:sdx:port:tenet.ac.za:Tenet01:1", "urn:sdx:port:tenet.ac.za:Tenet02:1"], "bandwidth": 10, "residual_bandwidth": 100, "latency": 0, "packet_loss": 0, "availability": 100, "status": "down", "state": "enabled", "private_attributes": null, "timestamp": null, "measurement_period": null}, {"id": "urn:sdx:link:tenet.ac.za:Tenet01/2_Tenet03/2", "name": "Tenet01/2_Tenet03/2", "short_name": null, "ports": ["urn:sdx:port:tenet.ac.za:Tenet01:2", "urn:sdx:port:tenet.ac.za:Tenet03:2"], "bandwidth": 10, "residual_bandwidth": 100, "latency": 0, "packet_loss": 0, "availability": 100, "status": "down", "state": "enabled", "private_attributes": null, "timestamp": null, "measurement_period": null}, {"id": "urn:sdx:link:tenet.ac.za:Tenet02/2_Tenet03/1", "name": "Tenet02/2_Tenet03/1", "short_name": null, "ports": ["urn:sdx:port:tenet.ac.za:Tenet02:2", "urn:sdx:port:tenet.ac.za:Tenet03:1"], "bandwidth": 10, "residual_bandwidth": 100, "latency": 0, "packet_loss": 0, "availability": 100, "status": "down", "state": "enabled", "private_attributes": null, "timestamp": null, "measurement_period": null}, {"id": "urn:sdx:link:sax.net:Sax01/1_Sax02/1", "name": "Sax01/1_Sax02/1", "short_name": null, "ports": ["urn:sdx:port:sax.net:Sax01:1", "urn:sdx:port:sax.net:Sax02:1"], "bandwidth": 10, "residual_bandwidth": 100, "latency": 0, "packet_loss": 0, "availability": 100, "status": "down", "state": "enabled", "private_attributes": null, "timestamp": null, "measurement_period": null}, {"id": "urn:sdx:link:ampath.net:Ampath1/1_Ampath2/1", "name": "Ampath1/1_Ampath2/1", "short_name": null, "ports": ["urn:sdx:port:ampath.net:Ampath1:1", "urn:sdx:port:ampath.net:Ampath2:1"], "bandwidth": 10, "residual_bandwidth": 100, "latency": 0, "packet_loss": 0, "availability": 100, "status": "down", "state": "enabled", "private_attributes": null, "timestamp": null, "measurement_period": null}, {"id": "urn:sdx:link:ampath.net:Ampath2/3_Ampath3/3", "name": "Ampath2/3_Ampath3/3", "short_name": null, "ports": ["urn:sdx:port:ampath.net:Ampath2:3", "urn:sdx:port:ampath.net:Ampath3:3"], "bandwidth": 10, "residual_bandwidth": 100, "latency": 0, "packet_loss": 0, "availability": 100, "status": "down", "state": "enabled", "private_attributes": null, "timestamp": null, "measurement_period": null}, {"id": "urn:sdx:link:ampath.net:Ampath1/2_Ampath3/2", "name": "Ampath1/2_Ampath3/2", "short_name": null, "ports": ["urn:sdx:port:ampath.net:Ampath1:2", "urn:sdx:port:ampath.net:Ampath3:2"], "bandwidth": 10, "residual_bandwidth": 100, "latency": 0, "packet_loss": 0, "availability": 100, "status": "down", "state": "enabled", "private_attributes": null, "timestamp": null, "measurement_period": null}], "private_attributes": null}
E       assert 200 == 204
E        +  where 200 = &lt;Response [200]&gt;.status_code

tests/test_01_topology.py:35: AssertionError</failure>
    </testcase>
    <testcase classname="tests.test_01_topology.TestE2ETopology" name="test_015_check_topology_follows_model_2_0_0" time="0.021">
      <failure message="AssertionError: Mismatch in nodes: got [{'name': 'Ampath1', 'id': 'urn:sdx:node:ampath.net:Ampath1', 'location': {'address': 'Miami', 'latitude': 25.77, 'longitude': -80.19, 'iso3166_2_lvl4': 'US-FL', 'private': []}, 'ports': [{'id': 'urn:sdx:port:ampath.net:Ampath1:1', 'name': 'Ampath1-eth1', 'node': 'urn:sdx:node:ampath.net:Ampath1', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': 'urn:sdx:link:ampath.net:Ampath1/1_Ampath2/1', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}, {'id': 'urn:sdx:port:ampath.net:Ampath1:40', 'name': 'Ampath1-eth40', 'node': 'urn:sdx:node:ampath.net:Ampath1', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': 'urn:sdx:port:sax.net:Sax01:40', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}, {'id': 'urn:sdx:port:ampath.net:Ampath1:2', 'name': 'Ampath1-eth2', 'node': 'urn:sdx:node:ampath.net:Ampath1', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': 'urn:sdx:link:ampath.net:Ampath1/2_Ampath3/2', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}, {'id': 'urn:sdx:port:ampath.net:Ampath1:50', 'name': 'Ampath1-eth50', 'node': 'urn:sdx:node:ampath.net:Ampath1', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': '', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}], 'status': 'down', 'state': 'enabled'}, {'name': 'Ampath2', 'id': 'urn:sdx:node:ampath.net:Ampath2', 'location': {'address': 'BocaRaton', 'latitude': 26.38, 'longitude': -80.11, 'iso3166_2_lvl4': 'US-FL', 'private': []}, 'ports': [{'id': 'urn:sdx:port:ampath.net:Ampath2:1', 'name': 'Ampath2-eth1', 'node': 'urn:sdx:node:ampath.net:Ampath2', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': 'urn:sdx:link:ampath.net:Ampath1/1_Ampath2/1', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}, {'id': 'urn:sdx:port:ampath.net:Ampath2:50', 'name': 'Ampath2-eth50', 'node': 'urn:sdx:node:ampath.net:Ampath2', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': '', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}, {'id': 'urn:sdx:port:ampath.net:Ampath2:40', 'name': 'Ampath2-eth40', 'node': 'urn:sdx:node:ampath.net:Ampath2', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': 'urn:sdx:port:sax.net:Sax02:40', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}, {'id': 'urn:sdx:port:ampath.net:Ampath2:3', 'name': 'Ampath2-eth3', 'node': 'urn:sdx:node:ampath.net:Ampath2', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': 'urn:sdx:link:ampath.net:Ampath2/3_Ampath3/3', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}], 'status': 'down', 'state': 'enabled'}, {'name': 'Ampath3', 'id': 'urn:sdx:node:ampath.net:Ampath3', 'location': {'address': 'Jacksonville', 'latitude': 30.27, 'longitude': -81.68, 'iso3166_2_lvl4': 'US-FL', 'private': []}, 'ports': [{'id': 'urn:sdx:port:ampath.net:Ampath3:50', 'name': 'Ampath3-eth50', 'node': 'urn:sdx:node:ampath.net:Ampath3', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': '', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}, {'id': 'urn:sdx:port:ampath.net:Ampath3:2', 'name': 'Ampath3-eth2', 'node': 'urn:sdx:node:ampath.net:Ampath3', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': 'urn:sdx:link:ampath.net:Ampath1/2_Ampath3/2', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}, {'id': 'urn:sdx:port:ampath.net:Ampath3:3', 'name': 'Ampath3-eth3', 'node': 'urn:sdx:node:ampath.net:Ampath3', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': 'urn:sdx:link:ampath.net:Ampath2/3_Ampath3/3', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}], 'status': 'down', 'state': 'enabled'}]&#10;assert [{'name': 'Ampath1', 'id': 'urn:sdx:node:ampath.net:Ampath1', 'location': {'address': 'Miami', 'latitude': 25.77, 'lon...vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}], 'status': 'down', 'state': 'enabled'}] == [{'id': 'urn:sdx:node:ampath.net:Ampath1', 'location': {'address': 'Miami', 'iso3166_2_lvl4': 'US-FL', 'latitude': 25....net:Ampath3:3', 'mtu': 1500, 'name': 'Ampath3-eth3', 'nni': 'urn:sdx:link:ampath.net:Ampath2/3_Ampath3/3', ...}], ...}]&#10;  Extra items in the left sequence:&#10;  {'id': 'urn:sdx:node:ampath.net:Ampath1', 'location': {'address': 'Miami', 'iso3166_2_lvl4': 'US-FL', 'latitude': 25.7... 1...&#10;  &#10;  ...Full output truncated (7 lines hidden), use '-vv' to show">self = &lt;test_01_topology.TestE2ETopology object at 0x7f2d1a781b50&gt;

    def test_015_check_topology_follows_model_2_0_0(self):
        expected_topos = self.net.get_converted_topologies()
        for idx, oxp in enumerate(["ampath", "sax", "tenet"]):
            response = requests.get(f"http://{oxp}:8181/api/kytos/sdx/topology/2.0.0")
            topo = response.json()
            for node in topo["nodes"]:
                node["ports"] = unordered(node["ports"])
            for attr in ["name", "id", "model_version", "nodes", "links", "services"]:
                assert attr in topo, f"Missing attribute {attr} in topology: {topo}"
&gt;               assert unordered(topo[attr]) == expected_topos[idx][attr], f"Mismatch in {attr}: got {topo[attr]}"
E               AssertionError: Mismatch in nodes: got [{'name': 'Ampath1', 'id': 'urn:sdx:node:ampath.net:Ampath1', 'location': {'address': 'Miami', 'latitude': 25.77, 'longitude': -80.19, 'iso3166_2_lvl4': 'US-FL', 'private': []}, 'ports': [{'id': 'urn:sdx:port:ampath.net:Ampath1:1', 'name': 'Ampath1-eth1', 'node': 'urn:sdx:node:ampath.net:Ampath1', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': 'urn:sdx:link:ampath.net:Ampath1/1_Ampath2/1', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}, {'id': 'urn:sdx:port:ampath.net:Ampath1:40', 'name': 'Ampath1-eth40', 'node': 'urn:sdx:node:ampath.net:Ampath1', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': 'urn:sdx:port:sax.net:Sax01:40', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}, {'id': 'urn:sdx:port:ampath.net:Ampath1:2', 'name': 'Ampath1-eth2', 'node': 'urn:sdx:node:ampath.net:Ampath1', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': 'urn:sdx:link:ampath.net:Ampath1/2_Ampath3/2', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}, {'id': 'urn:sdx:port:ampath.net:Ampath1:50', 'name': 'Ampath1-eth50', 'node': 'urn:sdx:node:ampath.net:Ampath1', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': '', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}], 'status': 'down', 'state': 'enabled'}, {'name': 'Ampath2', 'id': 'urn:sdx:node:ampath.net:Ampath2', 'location': {'address': 'BocaRaton', 'latitude': 26.38, 'longitude': -80.11, 'iso3166_2_lvl4': 'US-FL', 'private': []}, 'ports': [{'id': 'urn:sdx:port:ampath.net:Ampath2:1', 'name': 'Ampath2-eth1', 'node': 'urn:sdx:node:ampath.net:Ampath2', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': 'urn:sdx:link:ampath.net:Ampath1/1_Ampath2/1', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}, {'id': 'urn:sdx:port:ampath.net:Ampath2:50', 'name': 'Ampath2-eth50', 'node': 'urn:sdx:node:ampath.net:Ampath2', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': '', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}, {'id': 'urn:sdx:port:ampath.net:Ampath2:40', 'name': 'Ampath2-eth40', 'node': 'urn:sdx:node:ampath.net:Ampath2', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': 'urn:sdx:port:sax.net:Sax02:40', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}, {'id': 'urn:sdx:port:ampath.net:Ampath2:3', 'name': 'Ampath2-eth3', 'node': 'urn:sdx:node:ampath.net:Ampath2', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': 'urn:sdx:link:ampath.net:Ampath2/3_Ampath3/3', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}], 'status': 'down', 'state': 'enabled'}, {'name': 'Ampath3', 'id': 'urn:sdx:node:ampath.net:Ampath3', 'location': {'address': 'Jacksonville', 'latitude': 30.27, 'longitude': -81.68, 'iso3166_2_lvl4': 'US-FL', 'private': []}, 'ports': [{'id': 'urn:sdx:port:ampath.net:Ampath3:50', 'name': 'Ampath3-eth50', 'node': 'urn:sdx:node:ampath.net:Ampath3', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': '', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}, {'id': 'urn:sdx:port:ampath.net:Ampath3:2', 'name': 'Ampath3-eth2', 'node': 'urn:sdx:node:ampath.net:Ampath3', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': 'urn:sdx:link:ampath.net:Ampath1/2_Ampath3/2', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}, {'id': 'urn:sdx:port:ampath.net:Ampath3:3', 'name': 'Ampath3-eth3', 'node': 'urn:sdx:node:ampath.net:Ampath3', 'type': '10GE', 'status': 'down', 'state': 'enabled', 'mtu': 1500, 'nni': 'urn:sdx:link:ampath.net:Ampath2/3_Ampath3/3', 'services': {'l2vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}], 'status': 'down', 'state': 'enabled'}]
E               assert [{'name': 'Ampath1', 'id': 'urn:sdx:node:ampath.net:Ampath1', 'location': {'address': 'Miami', 'latitude': 25.77, 'lon...vpn-ptp': {'vlan_range': [[1, 4095]]}}, 'private': ['status'], 'entities': []}], 'status': 'down', 'state': 'enabled'}] == [{'id': 'urn:sdx:node:ampath.net:Ampath1', 'location': {'address': 'Miami', 'iso3166_2_lvl4': 'US-FL', 'latitude': 25....net:Ampath3:3', 'mtu': 1500, 'name': 'Ampath3-eth3', 'nni': 'urn:sdx:link:ampath.net:Ampath2/3_Ampath3/3', ...}], ...}]
E                 Extra items in the left sequence:
E                 {'id': 'urn:sdx:node:ampath.net:Ampath1', 'location': {'address': 'Miami', 'iso3166_2_lvl4': 'US-FL', 'latitude': 25.7... 1...
E                 
E                 ...Full output truncated (7 lines hidden), use '-vv' to show

tests/test_01_topology.py:62: AssertionError</failure>
    </testcase>
    <testcase classname="tests.test_01_topology.TestE2ETopology" name="test_020_set_intra_link_down_check_topology" time="0.007">
      <failure message="AssertionError: Expected port1 up, got: {'id': 'urn:sdx:port:ampath.net:Ampath1:1', 'name': 'Ampath1-eth1', 'entities': [], 'short_name': None, 'node': 'urn:sdx:node:ampath.net:Ampath1', 'vlan_range': None, 'status': 'down', 'state': 'enabled', 'nni': 'urn:sdx:link:ampath.net:Ampath1/1_Ampath2/1', 'type': '10GE', 'services': {'l2vpn_ptp': {'vlan_range': ['1-4095']}, 'l2vpn_ptmp': {}, 'monitoring_capability': None, 'owner': None, 'private_attributes': None, 'provisioning_system': None, 'provisioning_url': None, 'vendor': None}, 'private_attributes': None}&#10;assert 'down' == 'up'&#10;  &#10;  - up&#10;  + down">self = &lt;test_01_topology.TestE2ETopology object at 0x7f2d1a782150&gt;

    def test_020_set_intra_link_down_check_topology(self):
        api_url = SDX_CONTROLLER + '/topology'
        response = requests.get(api_url)
        data = response.json()
        ports = {port["id"]: port for node in data["nodes"] for port in node["ports"]}
        links = {link["id"]: link for link in data["links"]}
        port1 = "urn:sdx:port:ampath.net:Ampath1:1"
        port2 = "urn:sdx:port:ampath.net:Ampath2:1"
        link1 = "urn:sdx:link:ampath.net:Ampath1/1_Ampath2/1"
&gt;       assert ports[port1]["status"] == "up", f"Expected port1 up, got: {ports[port1]}"
E       AssertionError: Expected port1 up, got: {'id': 'urn:sdx:port:ampath.net:Ampath1:1', 'name': 'Ampath1-eth1', 'entities': [], 'short_name': None, 'node': 'urn:sdx:node:ampath.net:Ampath1', 'vlan_range': None, 'status': 'down', 'state': 'enabled', 'nni': 'urn:sdx:link:ampath.net:Ampath1/1_Ampath2/1', 'type': '10GE', 'services': {'l2vpn_ptp': {'vlan_range': ['1-4095']}, 'l2vpn_ptmp': {}, 'monitoring_capability': None, 'owner': None, 'private_attributes': None, 'provisioning_system': None, 'provisioning_url': None, 'vendor': None}, 'private_attributes': None}
E       assert 'down' == 'up'
E         
E         - up
E         + down

tests/test_01_topology.py:73: AssertionError</failure>
    </testcase>
    <testcase classname="tests.test_01_topology.TestE2ETopology" name="test_025_set_inter_link_down_check_topology" time="0.007">
      <failure message="AssertionError: Expected port1 up, got: {'id': 'urn:sdx:port:sax.net:Sax01:41', 'name': 'Sax01-eth41', 'entities': [], 'short_name': None, 'node': 'urn:sdx:node:sax.net:Sax01', 'vlan_range': None, 'status': 'down', 'state': 'enabled', 'nni': 'urn:sdx:port:tenet.ac.za:Tenet01:41', 'type': '10GE', 'services': {'l2vpn_ptp': {'vlan_range': ['1-4095']}, 'l2vpn_ptmp': {}, 'monitoring_capability': None, 'owner': None, 'private_attributes': None, 'provisioning_system': None, 'provisioning_url': None, 'vendor': None}, 'private_attributes': None}&#10;assert 'down' == 'up'&#10;  &#10;  - up&#10;  + down">self = &lt;test_01_topology.TestE2ETopology object at 0x7f2d1a782790&gt;

    def test_025_set_inter_link_down_check_topology(self):
        api_url = SDX_CONTROLLER + '/topology'
        response = requests.get(api_url)
        data = response.json()
        ports = {port["id"]: port for node in data["nodes"] for port in node["ports"]}
        links = {link["id"]: link for link in data["links"]}
        port1 = "urn:sdx:port:sax.net:Sax01:41"
        port2 = "urn:sdx:port:tenet.ac.za:Tenet01:41"
        link1 = "urn:sdx:link:interdomain:sax.net:Sax01:41:tenet.ac.za:Tenet01:41"
&gt;       assert ports[port1]["status"] == "up", f"Expected port1 up, got: {ports[port1]}"
E       AssertionError: Expected port1 up, got: {'id': 'urn:sdx:port:sax.net:Sax01:41', 'name': 'Sax01-eth41', 'entities': [], 'short_name': None, 'node': 'urn:sdx:node:sax.net:Sax01', 'vlan_range': None, 'status': 'down', 'state': 'enabled', 'nni': 'urn:sdx:port:tenet.ac.za:Tenet01:41', 'type': '10GE', 'services': {'l2vpn_ptp': {'vlan_range': ['1-4095']}, 'l2vpn_ptmp': {}, 'monitoring_capability': None, 'owner': None, 'private_attributes': None, 'provisioning_system': None, 'provisioning_url': None, 'vendor': None}, 'private_attributes': None}
E       assert 'down' == 'up'
E         
E         - up
E         + down

tests/test_01_topology.py:97: AssertionError</failure>
    </testcase>
    <testcase classname="tests.test_01_topology.TestE2ETopology" name="test_030_location_change" time="1.858">
      <failure message="AssertionError: Topology version did not increase: old=39.0, new=39&#10;assert 39.0 &lt; 39.0&#10; +  where 39.0 = float('39')">self = &lt;test_01_topology.TestE2ETopology object at 0x7f2d1a782d90&gt;

    def test_030_location_change(self):
        """Test Location changes"""
        api_url = SDX_CONTROLLER + '/topology'
        response = requests.get(api_url)
        data = response.json()
        version = float(data["version"])
    
        ampath_ctrl = 'ampath'
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200, f"Failed to get switches: {response.status_code} - {response.text}"
        ampath_switches = response.json()["switches"]
        key = next(iter(ampath_switches))
        item_to_change_id = ampath_switches[key]['id']
    
        new_metadata = {"lat": "1", "lng": "2", "address": "Miami", "iso3166_2_lvl4": "US-FL"}
        response = requests.post(f"{ampath_topo_api}/switches/{item_to_change_id}/metadata", json=new_metadata)
        assert 200 &lt;= response.status_code &lt; 300, f"Metadata update failed: {response.status_code} - {response.text}"
    
        sdx_api = KYTOS_SDX_API % ampath_ctrl
        response = requests.post(f"{sdx_api}/topology/2.0.0")
        assert response.status_code == 200, f"Topology sync failed: {response.status_code} - {response.text}"
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200, f"Switches fetch failed: {response.status_code} - {response.text}"
        ampath_switches = response.json()["switches"]
        metadata = ampath_switches[item_to_change_id]['metadata']
        assert metadata == new_metadata, f"Metadata mismatch: {metadata}"
    
        response = requests.get(api_url)
        data = response.json()
&gt;       assert version &lt; float(data["version"]), f"Topology version did not increase: old={version}, new={data['version']}"
E       AssertionError: Topology version did not increase: old=39.0, new=39
E       assert 39.0 &lt; 39.0
E        +  where 39.0 = float('39')

tests/test_01_topology.py:143: AssertionError</failure>
    </testcase>
    <testcase classname="tests.test_05_l2vpn.TestE2EL2VPN" name="test_010_list_l2vpn_empty" time="14.669">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a658150&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_05_l2vpn.TestE2EL2VPN'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_05_l2vpn.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a658150&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_05_l2vpn.TestE2EL2VPN" name="test_020_create_l2vpn_successfully" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a658150&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_05_l2vpn.TestE2EL2VPN'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_05_l2vpn.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a658150&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_05_l2vpn.TestE2EL2VPN" name="test_030_create_l2vpn_with_any_vlan" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a658150&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_05_l2vpn.TestE2EL2VPN'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_05_l2vpn.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a658150&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_05_l2vpn.TestE2EL2VPN" name="test_040_edit_vlan_l2vpn_successfully" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a658150&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_05_l2vpn.TestE2EL2VPN'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_05_l2vpn.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a658150&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_05_l2vpn.TestE2EL2VPN" name="test_045_edit_port_l2vpn_successfully" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a658150&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_05_l2vpn.TestE2EL2VPN'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_05_l2vpn.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a658150&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_05_l2vpn.TestE2EL2VPN" name="test_050_delete_l2vpn_successfully" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a658150&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_05_l2vpn.TestE2EL2VPN'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_05_l2vpn.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a658150&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_05_l2vpn.TestE2EL2VPN" name="test_060_link_convergency_with_l2vpn_with_alternative_paths" time="0.000">
      <skipped type="pytest.xfail" message="AssertionError: assert ', 0% packet loss, ... 100% packet loss,...'"/>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_010_create_l2vpn" time="14.621">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_011_create_l2vpn_vlan_translation" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_012_create_l2vpn_with_vlan_any" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_013_create_l2vpn_with_vlan_range" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_014_create_l2vpn_with_vlan_untagged" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_015_create_l2vpn_with_optional_attributes" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_020_create_l2vpn_with_invalid_vlan_type" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_021_create_l2vpn_with_vlan_out_of_range" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_022_create_l2vpn_with_vlan_negative" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_023_create_l2vpn_with_vlan_all" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_024_create_l2vpn_with_missing_vlan" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_025_create_l2vpn_with_body_incorrect" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_026_create_l2vpn_with_missing_name" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_027_create_l2vpn_with_non_existent_port" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_028_create_l2vpn_with_invalid_port_id_format" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_029_create_l2vpn_with_single_endpoint" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_030_create_l2vpn_with_p2mp" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_040_create_duplicate_l2vpn" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_050_create_l2vpn_with_invalid_json" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_060_create_l2vpn_with_no_body" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_070_create_l2vpn_with_invalid_method" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_06_l2vpn_return_codes.TestE2EReturnCodes" name="test_071_create_l2vpn_with_extra_fields" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_06_l2vpn_return_codes.TestE2EReturnCodes'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_06_l2vpn_return_codes.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a5ea510&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_010_edit_l2vpn_vlan" time="20.778">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_011_edit_l2vpn_port_id" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_020_edit_l2vpn_with_vlan_integer" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_021_edit_l2vpn_with_vlan_out_of_range" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_022_edit_l2vpn_with_vlan_all" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_023_edit_l2vpn_with_missing_vlan" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_024_edit_l2vpn_with_body_incorrect" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_025_edit_l2vpn_with_vlan_negative" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_026_edit_l2vpn_with_missing_name" time="0.001">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_027_edit_l2vpn_with_non_existent_port" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_028_edit_l2vpn_with_invalid_port_id_format" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_029_edit_l2vpn_with_with_single_endpoint" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_030_edit_l2vpn_with_p2mp" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_040_edit_l2vpn_not_found_id_code404" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_050_edit_l2vpn_conflict" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_060_edit_l2vpn_with_min_bw" time="0.000">
      <skipped type="pytest.xfail" message="return status 410 -&gt; Could not solve the request"/>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_061_edit_l2vpn_with_max_delay" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_062_edit_l2vpn_with_max_number_oxps" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_063_edit_l2vpn_with_min_bw_out_of_range" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_064_edit_l2vpn_with_max_delay_out_of_range" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_065_edit_l2vpn_with_max_number_oxps_out_of_range" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_07_l2vpn_return_codes.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a800950&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_07_l2vpn_return_codes.TestE2EReturnCodesEditL2vpn" name="test_070_edit_l2vpn_with_impossible_scheduling" time="0.001">
      <skipped type="pytest.xfail" message="return status 402 - Error: Validation error: Scheduling advanced reservation is not supported"/>
    </testcase>
    <testcase classname="tests.test_08_l2vpn_delete.TestE2EReturnCodesDeleteL2vpn" name="test_010_delete_existing_l2vpn" time="18.971">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a79fc10&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_08_l2vpn_delete.TestE2EReturnCodesDeleteL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_08_l2vpn_delete.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a79fc10&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_08_l2vpn_delete.TestE2EReturnCodesDeleteL2vpn" name="test_020_delete_nonexistent_l2vpn" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a79fc10&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_08_l2vpn_delete.TestE2EReturnCodesDeleteL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_08_l2vpn_delete.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a79fc10&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_08_l2vpn_delete.TestE2EReturnCodesDeleteL2vpn" name="test_030_delete_l2vpn_twice" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a79fc10&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_08_l2vpn_delete.TestE2EReturnCodesDeleteL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_08_l2vpn_delete.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a79fc10&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_08_l2vpn_delete.TestE2EReturnCodesDeleteL2vpn" name="test_040_delete_with_invalid_id_format" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a79fc10&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_08_l2vpn_delete.TestE2EReturnCodesDeleteL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_08_l2vpn_delete.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a79fc10&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_08_l2vpn_delete.TestE2EReturnCodesDeleteL2vpn" name="test_050_delete_l2vpn_conflict_resolution" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a79fc10&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_08_l2vpn_delete.TestE2EReturnCodesDeleteL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_08_l2vpn_delete.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a79fc10&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_08_l2vpn_delete.TestE2EReturnCodesDeleteL2vpn" name="test_060_delete_l2vpn_twice" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a79fc10&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_08_l2vpn_delete.TestE2EReturnCodesDeleteL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_08_l2vpn_delete.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a79fc10&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_08_l2vpn_delete.TestE2EReturnCodesDeleteL2vpn" name="test_070_delete_l2vpn_after_edit" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a79fc10&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_08_l2vpn_delete.TestE2EReturnCodesDeleteL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_08_l2vpn_delete.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a79fc10&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_08_l2vpn_delete.TestE2EReturnCodesDeleteL2vpn" name="test_080_delete_all_l2vpns" time="0.000">
      <error message="failed on setup with &quot;Exception&quot;">self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a79fc10&gt;

    def run_setup_topo(self):
        try:
&gt;           self.setup_topo(*self.controllers_ip)

tests/helpers.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ampath_ctrl = '172.18.0.4', sax_ctrl = '172.18.0.8', tenet_ctrl = '172.18.0.10'

    def setup_topo(ampath_ctrl, sax_ctrl, tenet_ctrl):
        """Does all necessary setup for this test"""
        ampath_topo_api = KYTOS_TOPO_API % ampath_ctrl
        sax_topo_api = KYTOS_TOPO_API % sax_ctrl
        tenet_topo_api = KYTOS_TOPO_API % tenet_ctrl
    
        response = requests.get(f"{ampath_topo_api}/switches")
        assert response.status_code == 200
        ampath_switches = response.json()["switches"]
        assert len(ampath_switches) == 3
    
        response = requests.get(f"{sax_topo_api}/switches")
        assert response.status_code == 200
        sax_switches = response.json()["switches"]
        assert len(sax_switches) == 2
    
        response = requests.get(f"{tenet_topo_api}/switches")
        assert response.status_code == 200
        tenet_switches = response.json()["switches"]
        assert len(tenet_switches) == 3
    
        for sw_id in ampath_switches:
            response = requests.post(f"{ampath_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{ampath_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in sax_switches:
            response = requests.post(f"{sax_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{sax_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        for sw_id in tenet_switches:
            response = requests.post(f"{tenet_topo_api}/switches/{sw_id}/enable")
            assert response.status_code == 201, response.text
            response = requests.post(f"{tenet_topo_api}/interfaces/switch/{sw_id}/enable")
            assert response.status_code == 200, response.text
    
        # give a few seconds for link discovery (LLDP)
        time.sleep(10)
    
        response = requests.get(f"{ampath_topo_api}/links")
        assert response.status_code == 200
        ampath_links = response.json()["links"]
        assert len(ampath_links) == 3
        for link_id in ampath_links:
            response = requests.post(f"{ampath_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{sax_topo_api}/links")
        assert response.status_code == 200
        sax_links = response.json()["links"]
        assert len(sax_links) == 1
        for link_id in sax_links:
            response = requests.post(f"{sax_topo_api}/links/{link_id}/enable")
            assert response.status_code == 201
    
        response = requests.get(f"{tenet_topo_api}/links")
        assert response.status_code == 200
        tenet_links = response.json()["links"]
&gt;       assert len(tenet_links) == 2
E       AssertionError

tests/topologies/simple3oxps.py:160: AssertionError

During handling of the above exception, another exception occurred:

cls = &lt;class 'test_08_l2vpn_delete.TestE2EReturnCodesDeleteL2vpn'&gt;

    @classmethod
    def setup_class(cls):
        cls.net = NetworkTest(["ampath", "sax", "tenet"])
        cls.net.wait_switches_connect()
&gt;       cls.net.run_setup_topo()

tests/test_08_l2vpn_delete.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;tests.helpers.NetworkTest object at 0x7f2d1a79fc10&gt;

    def run_setup_topo(self):
        try:
            self.setup_topo(*self.controllers_ip)
        except Exception as exc:
            self.stop()
            mininet.clean.cleanup()
&gt;           raise Exception(exc)
E           Exception

tests/helpers.py:37: Exception</error>
    </testcase>
    <testcase classname="tests.test_99_topology_big_changes.TestE2ETopologyBigChanges" name="test_040_add_intra_link_check_topology" time="54.540">
      <skipped type="pytest.xfail" message="AssertionError"/>
    </testcase>
    <testcase classname="tests.test_99_topology_big_changes.TestE2ETopologyBigChanges" name="test_070_add_port_check_topology" time="32.122"/>
  </testsuite>
</testsuites>
